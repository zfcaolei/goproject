package main

import (
	"fmt"
	"strconv"
	"time"
)

//goroutine

//进程：就是程序的一次执行过程，是系统进行资源分配和调度的基本单位
//线程：线程是进程的一个执行实例,是程序最小单元,它是比进程更小的能独立运行的基本单位
//     一个进程能创建.销毁多个线程,同一个进程中的多个线程可以并发执行

//并发：多线程程序在单核上运行就是并发
//因为是在一个cpu上，比如十个线程, 每个线程执行10毫秒（进行轮循操作）
//从人的角度上看好像这十个线程都在运行，但是微观上看，在某一个时间点看，
//其实只有一个线程在执行，这就是并发


//并行：多线程程序在多核上运行就是并行


//协程 go主线程（有程序员成为线程/也可以理解为进程）：一个go线程上，可以起
//多个协程，你也可以理解为协程是轻量级的线程


//协程特点: 有独立的栈空间，共享程序堆空间,调度用户控制，协程是轻量级线程 
func test01()  {
	for i:=0;i<=10;i++ {
		fmt.Println("test()"+strconv.Itoa(i))
		time.Sleep(time.Second)
	}
}

//主线程退出协程还没有执行完毕也会退出
//当然协程也可以在主线程没有退出前就自己结束，比如完成了自己的任务
func main()  {
	go test01()
	for i:=0;i<=10;i++ {
		fmt.Println("main()"+strconv.Itoa(i))
		time.Sleep(time.Second)
	}

}